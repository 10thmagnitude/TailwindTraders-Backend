name: 1.0$(Rev:.r)

trigger:
- master

resources:
- repo: self

variables:
  subscription: '10M Client Demo'
  resourceGroup: 'cd-tailwind'
  acrName: 'ttacrroodsefvnkxhc' # generated by the infra pipeline
  acrConnection: 'TailWindACR' # you have to create this endpoint in AzDO
  imagePullSecret: acr-auth
  autoscale: false
  deployWindows: false
  deployfrom: 'Deploy'
  tagOverride: '1.0.32' # ''
  tag: $[coalesce(variables['tagOverride'], variabes['build.buildnumber'])]

stages:
- stage: build
  displayName: Build Images
  jobs:
  - job: Deploy_Scripts
    condition: eq(variables['tagOverride'], '')
    displayName: Deploy Scripts
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CopyFiles@2
      displayName: Copy release scripts
      inputs:
        SourceFolder: '$(deployfrom)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: Publish scripts artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'deploy'
        publishLocation: 'Container'

  - job: Build_Linux
    condition: eq(variables['tagOverride'], '')
    displayName: Build Linux Containers
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@1
      displayName: Build and Push to ACR 
      inputs:
        azureSubscription: '$(subscription)'
        scriptLocation: 'inlineScript'
        inlineScript: 'pwsh -File Build-Push.ps1 -resourceGroup $(resourceGroup) -acrName $(acrName) -dockerTag $(Build.BuildNumber)'
        addSpnToEnvironment: true
        useGlobalConfig: true
        workingDirectory: 'Deploy/powershell'

  - job: Build_Windows
    displayName: Build Windows Containers
    condition: and(eq(variables['deployWindows'], 'true'), eq(variables['tagOverride'], ''))
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/Tailwind.Traders.Backend.Rewards.sln'
        feedsToUse: 'select'
    - task: MSBuild@1
      inputs:
        solution: '**/Tailwind.Traders.Rewards.Registration.Api.csproj'
        msbuildArchitecture: 'x64'
        msbuildArguments: '/p:DeployOnBuild=true /p:PublishProfile=FolderProfile.pubxml'
        clean: true
    - task: AzureCLI@1
      displayName: Build and Push to ACR 
      inputs:
        azureSubscription: '$(subscription)'
        scriptLocation: 'inlineScript'
        inlineScript: 'pwsh -Command .\Build-Push.ps1 -resourceGroup $(resourceGroup) -acrName $(acrName) -dockerTag $(Build.BuildId) -isWindowsMachine 1'
        addSpnToEnvironment: true
        useGlobalConfig: true
        workingDirectory: 'Deploy\powershell'

- stage: dev
  displayName: Build Images
  dependsOn: build
  jobs:
  - deployment: deploy_dev
    displayName: Deploy
    environment:
      TailWindAKS-Dev.dev   # the name of the Environment, period, name of the namespace. Approvals are on environment!
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: none
          - task: AzureCLI@2
            displayName: Deploy images
            inputs:
              azureSubscription: $(subscription)
              scriptType: pscore
              scriptPath: $(Build.SourcesDirectory)/Deploy/powershell/Deploy-Pictures-Azure.ps1
              scriptArguments:
                -resourceGroup $(resourceGroup)
              azurePowerShellVersion: latestVersion
              workingDirectory: $(Build.SourcesDirectory)/Deploy/powershell
          - task: AzureCLI@2
            displayName: Generate config for environment
            inputs:
              azureSubscription: $(subscription)
              scriptType: pscore
              scriptPath: $(Build.SourcesDirectory)/Deploy/powershell/Generate-Config.ps1
              scriptArguments:
                -resourceGroup $(resourceGroup) `
                -outputFile ../helm/__values/values.yml
              azurePowerShellVersion: latestVersion
              workingDirectory: $(Build.SourcesDirectory)/Deploy/powershell
          - task: AzureCLI@2
            displayName: Calculate DNS name
            inputs:
              azureSubscription: $(subscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                aksName=$(az aks list -g $(resourceGroup) --query [0].name -o tsv)
                hname=$(az aks show -n $aksName -g $(resourceGroup) --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
                echo "##vso[task.setvariable variable=IngressHost;]$hname"
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(acrConnection)
          - task: KubernetesManifest@0
            displayName: Create service account for namespace
            inputs:
              action: deploy
              manifests: $(Build.SourcesDirectory)/Deploy/helm/ttsa.yaml  ## has the name of the acr secret hard-coded
          - task: KubernetesManifest@0
            name: bake_products_api
            displayName: Bake products-api manifest
            inputs:
              action: bake
              renderType: helm2
              releaseName: products-api-dev
              helmChart: $(Build.SourcesDirectory)/Deploy/helm/products-api
              overrideFiles: $(Build.SourcesDirectory)/Deploy/helm/__values/values.yml
              overrides: |
                ingress.hosts:{'$(IngressHost)'}
                image.repository:$(acrName).azurecr.io/product.api
                image.tag:$(tag)
                hpa.activated:$(autoscale)
                ingress.tls[0].secretName:tt-letsencrypt-staging
                ingress.tls[0].hosts:{'$(IngressHost)'}
          - task: KubernetesManifest@0
            displayName: Deploy products-api to k8s
            inputs:
              manifests: $(bake_products_api.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)
    
    